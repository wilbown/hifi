<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  simple_transparent_textured.frag
//  fragment shader
//
//  Created by Sam Gateau on 4/3/17.
//  Copyright 2017 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//
<@include DefaultMaterials.slh@>

<@include gpu/Color.slh@>
<@include render-utils/ShaderConstants.h@>

<@include DeferredGlobalLight.slh@>
<$declareEvalGlobalLightingAlphaBlendedWithHaze()$>

<@include gpu/Transform.slh@>
<$declareStandardCameraTransform()$>

LAYOUT(binding=0) uniform sampler2D originalTexture;

layout(location=RENDER_UTILS_ATTR_POSITION_ES) in vec4 _positionES;
layout(location=RENDER_UTILS_ATTR_NORMAL_WS) in vec3 _normalWS;
layout(location=RENDER_UTILS_ATTR_COLOR) in vec4 _color;
layout(location=RENDER_UTILS_ATTR_TEXCOORD01) in vec4 _texCoord01;
#define _texCoord0 _texCoord01.xy
#define _texCoord1 _texCoord01.zw

layout(location=0) out vec4 _fragColor0;

void main(void) {
    vec4 texel = texture(originalTexture, _texCoord0);
    texel = mix(texel, color_sRGBAToLinear(texel), float(_color.a <= 0.0));
    vec3 albedo = _color.xyz * texel.xyz;
    float alpha = _color.a * texel.a;
    float metallic = DEFAULT_METALLIC;

    vec3 fresnel = getFresnelF0(metallic, albedo);

    TransformCamera cam = getTransformCamera();
    vec3 fragPosition = _positionES.xyz;

    _fragColor0 = vec4(evalGlobalLightingAlphaBlendedWithHaze(
        cam._viewInverse,
        1.0,
        DEFAULT_OCCLUSION,
        fragPosition,
        normalize(_normalWS),
        albedo,
        fresnel,
        metallic,
        DEFAULT_EMISSIVE,
        DEFAULT_ROUGHNESS, alpha),
        alpha);
}
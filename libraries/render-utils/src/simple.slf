<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  simple.frag
//  fragment shader
//
//  Created by Andrzej Kapolka on 9/15/14.
//  Copyright 2014 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include DeferredBufferWrite.slh@>

<@include render-utils/ShaderConstants.h@>

// the interpolated normal
layout(location=RENDER_UTILS_ATTR_NORMAL_WS) in vec3 _normalWS;
layout(location=RENDER_UTILS_ATTR_NORMAL_MS) in vec3 _normalMS;
layout(location=RENDER_UTILS_ATTR_COLOR) in vec4 _color;
layout(location=RENDER_UTILS_ATTR_TEXCOORD01) in vec4 _texCoord01;
#define _texCoord0 _texCoord01.xy
#define _texCoord1 _texCoord01.zw
layout(location=RENDER_UTILS_ATTR_POSITION_MS) in vec4 _positionMS;
layout(location=RENDER_UTILS_ATTR_POSITION_ES) in vec4 _positionES;

// For retro-compatibility
#define _normal      _normalWS
#define _modelNormal _normalMS
#define _position    _positionMS
#define _eyePosition _positionES

<@include procedural/ProceduralCommon.slh@>

#line 1001
//PROCEDURAL_BLOCK_BEGIN

vec3 getProceduralColor() {
    return _color.rgb;
}

float getProceduralColors(inout vec3 diffuse, inout vec3 specular, inout float shininess) {
    return 1.0;
}

//PROCEDURAL_BLOCK_END

#line 2030
void main(void) {
    vec3 normal = normalize(_normalWS.xyz);
    vec3 diffuse = _color.rgb;
    vec3 specular = DEFAULT_SPECULAR;
    float shininess = DEFAULT_SHININESS;
    float emissiveAmount = 0.0;

#ifdef PROCEDURAL

#ifdef PROCEDURAL_V1
    diffuse = getProceduralColor().rgb;
    // Procedural Shaders are expected to be Gamma corrected so let's bring back the RGB in linear space for the rest of the pipeline
    //diffuse = pow(diffuse, vec3(2.2));
    emissiveAmount = 1.0;
#else
    emissiveAmount = getProceduralColors(diffuse, specular, shininess);
#endif

#endif

    if (emissiveAmount > 0.0) {
        packDeferredFragmentLightmap(
            normal,
            1.0,
            diffuse,
            max(0.0, 1.0 - shininess / 128.0),
            DEFAULT_METALLIC,
            vec3(clamp(emissiveAmount, 0.0, 1.0)));
    } else {
        packDeferredFragment(
            normal,
            1.0,
            diffuse,
            max(0.0, 1.0 - shininess / 128.0),
            length(specular),
            DEFAULT_EMISSIVE,
            DEFAULT_OCCLUSION,
            DEFAULT_SCATTERING);
    }
}

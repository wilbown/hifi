<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  simple.frag
//  fragment shader
//
//  Created by Andrzej Kapolka on 9/15/14.
//  Copyright 2014 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include DeferredBufferWrite.slh@>

<@include gpu/Transform.slh@>
<$declareStandardCameraTransform()$>

<@include render-utils/ShaderConstants.h@>

// the interpolated normal
layout(location=RENDER_UTILS_ATTR_NORMAL_WS) in vec3 _normalWS;
layout(location=RENDER_UTILS_ATTR_NORMAL_MS) in vec3 _normalMS;
layout(location=RENDER_UTILS_ATTR_COLOR) in vec4 _color;
layout(location=RENDER_UTILS_ATTR_TEXCOORD01) in vec4 _texCoord01;
#define _texCoord0 _texCoord01.xy
#define _texCoord1 _texCoord01.zw
layout(location=RENDER_UTILS_ATTR_POSITION_MS) in vec4 _positionMS;
layout(location=RENDER_UTILS_ATTR_POSITION_ES) in vec4 _positionES;

// For retro-compatibility
#define _normal      _normalWS
#define _modelNormal _normalMS
#define _position    _positionMS
#define _eyePosition _positionES

<@include procedural/ProceduralCommon.slh@>

#line 1001
//PROCEDURAL_BLOCK_BEGIN

vec3 getProceduralColor() {
    return _color.rgb;
}

float getProceduralColors(inout vec3 diffuse, inout vec3 specular, inout float shininess) {
    return 1.0;
}

float getProceduralFragment(inout ProceduralFragment proceduralData) {
    return 1.0;
}

float getProceduralFragmentWithPosition(inout ProceduralFragmentWithPosition proceduralData) {
    return 1.0;
}

//PROCEDURAL_BLOCK_END

#line 2030
void main(void) {
    vec3 normal = normalize(_normalWS.xyz);
    vec3 diffuse = _color.rgb;
    float roughness = DEFAULT_ROUGHNESS;
    float metallic = DEFAULT_METALLIC;
    vec3 emissive = DEFAULT_EMISSIVE;
    float occlusion = DEFAULT_OCCLUSION;
    float scattering = DEFAULT_SCATTERING;

    float emissiveAmount = 0.0;

#if defined(PROCEDURAL_V1)
    diffuse = getProceduralColor().rgb;
    emissiveAmount = 1.0;
    emissive = vec3(1.0);
#elif defined(PROCEDURAL_V2)
    vec3 specular = DEFAULT_SPECULAR;
    float shininess = DEFAULT_SHININESS;
    emissiveAmount = getProceduralColors(diffuse, specular, shininess);
    roughness = max(0.0, 1.0 - shininess / 128.0);
    metallic = length(specular);
    emissive = vec3(clamp(emissiveAmount, 0.0, 1.0));
#elif defined(PROCEDURAL_V3) || defined(PROCEDURAL_V4)
#if defined(PROCEDURAL_V3)
    ProceduralFragment proceduralData = ProceduralFragment(
#else
    TransformCamera cam = getTransformCamera();
    vec4 position = cam._viewInverse * _positionES;
    ProceduralFragmentWithPosition proceduralData = ProceduralFragmentWithPosition(
        position.xyz,
#endif
        normal,
        diffuse,
        DEFAULT_SPECULAR,
        emissive,
        1.0,
        roughness,
        metallic,
        occlusion,
        scattering
    );

#if defined(PROCEDURAL_V3)
    emissiveAmount = getProceduralFragment(proceduralData);
#else
    emissiveAmount = getProceduralFragmentWithPosition(proceduralData);
#endif
    normal = proceduralData.normal;
    diffuse = proceduralData.diffuse;
    roughness = proceduralData.roughness;
    metallic = proceduralData.metallic;
    emissive = proceduralData.emissive;
    occlusion = proceduralData.occlusion;
    scattering = proceduralData.scattering;

#if defined(PROCEDURAL_V4)
    position = vec4(proceduralData.position, 1.0);
    vec4 posClip = cam._projection * (cam._view * position);
    gl_FragDepth = 0.5 * (posClip.z / posClip.w + 1.0);
#endif

#endif

    if (emissiveAmount > 0.0) {
        packDeferredFragmentLightmap(
            normal,
            1.0,
            diffuse,
            roughness,
            metallic,
            emissive);
    } else {
        packDeferredFragment(
            normal,
            1.0,
            diffuse,
            roughness,
            metallic,
            emissive,
            occlusion,
            scattering);
    }
}

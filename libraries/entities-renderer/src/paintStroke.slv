<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  paintStroke.vert
//  vertex shader
//
//  Created by Eric Levin on 7/20/15.
//  Copyright 2014 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include gpu/Inputs.slh@>
<@include gpu/Color.slh@>
<@include gpu/Transform.slh@>
<$declareStandardTransform()$>

<@include paintStroke.slh@>
<$declarePolyLineBuffers()$>

layout(location=0) out vec3 _normalWS;
layout(location=1) out vec2 _texCoord;
layout(location=2) out vec4 _color;
layout(location=3) out float _distanceFromCenter;

void main(void) {
    PolylineVertex vertex = getPolylineVertex(gl_VertexID / 2);
    float evenVertex = float(gl_VertexID % 2 == 0);

    _texCoord = vec2(vertex.positionAndUCoord.w, mix(1.0, 0.0, evenVertex));
    _color = color_sRGBAToLinear(vertex.color);

    TransformCamera cam = getTransformCamera();
    TransformObject obj = getTransformObject();
    _distanceFromCenter = -1.0 + 2.0 * evenVertex;
    vec4 position = vec4(vertex.positionAndUCoord.xyz, 1.0);
    vec3 normal = vertex.normal.xyz;
    vec3 binormal = vertex.binormalAndHalfWidth.xyz;
    if (_polylineData.faceCameraGlow.x != 0.0) {
        vec4 posEye;
        vec3 normalEye;
        vec3 binormalEye;
        <$transformModelToEyePos(cam, obj, position, posEye)$>
        <$transformModelToEyeDir(cam, obj, normal, normalEye)$>
        <$transformModelToEyeDir(cam, obj, binormal, binormalEye)$>

        vec3 tangentEye = cross(binormalEye, normalEye);
        // new normal faces the camera
        normalEye = normalize(posEye.xyz);
        binormalEye = normalize(cross(normalEye, tangentEye));
        posEye.xyz += _distanceFromCenter * vertex.binormalAndHalfWidth.w * binormalEye;
        <$transformEyeToClipPos(cam, posEye, gl_Position)$>
        <$transformEyeToWorldDir(cam, normalEye, _normalWS)$>
    } else {
        position.xyz += _distanceFromCenter * vertex.binormalAndHalfWidth.w * binormal;
        <$transformModelToClipPos(cam, obj, position, gl_Position)$>
        <$transformModelToWorldDir(cam, obj, normal, _normalWS)$>
    }
}